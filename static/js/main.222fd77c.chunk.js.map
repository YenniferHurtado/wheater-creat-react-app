{"version":3,"sources":["components/services/getUrlWeatherByCity.js","contants/api_url.js","components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","contants/weathers.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/index.js","components/services/tranformWeather.js","components/WeatherLocation/index.js","components/LocationList.js","components/ForecastItem/index.js","components/services/transformForecast.js","components/ForecastExtended.js","App.js","serviceWorker.js","index.js"],"names":["getUrlWeatherByCity","city","concat","Location","_ref","react_default","a","createElement","className","icons","_icons","Object","defineProperty","WeatherTemperature","temperature","weatherState","icon","react_weathericons_lib_default","name","size","getWeatherIcon","WeatherExtraInfo","humidity","wind","protTypes","PropTypes","number","isRequired","string","WeatherData","_ref$data","data","WeatherData_WeatherTemperature","WeatherData_WeatherExtraInfo","transformWeather","weather_data","kelvin","_weather_data$main","main","temp","speed","weather","id","getWeatherState","Number","convert","from","to","toFixed","WeatherLocation","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleUpdateClick","api_weather","state","fetch","then","resolve","json","newWeather","setState","prevProps","prevState","onWeatherLocationClick","_this$state","onClick","WeatherLocation_Location","WeatherLocation_WeatherData","CircularProgress","Component","proTypes","func","LocationList","cities","onSelectedLocation","map","components_WeatherLocation","key","handleWeatherLocationClick","strToComponent","ForecastItem","weekDay","hour","transformForecast","list","filter","item","moment","unix","dt","utc","format","api_key","url_base_weather","ForecastExtended","updateCity","url_forecast","forecastData","renderProgress","nextProps","forecast","components_ForecastItem","renderForecastItemDays","App","handleSelectionLocation","lib","xs","AppBar","position","Toolbar","Typography","variant","color","md","components_LocationList","Paper","components_ForecastExtended","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.222fd77c.chunk.js","sourcesContent":["\nimport { api_key, url_base_weather } from \"../../contants/api_url\";\n\nconst getUrlWeatherByCity = city => {\n    return `${url_base_weather}?q=${city}&appid=${api_key}`;\n}\n\nexport default getUrlWeatherByCity;","\nexport const api_key = '25cda12ba99af5f6251afbb7d48528fb';\nexport const url_base_weather = 'http://api.openweathermap.org/data/2.5/weather';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css'\n\nconst Location = ( {city} ) => (\n    \n    <div className=\"locationCont\">\n        <h1>\n            {city}\n        </h1>\n    </div>\n );\n\nLocation.propTypes = {\n    city: PropTypes.string.isRequired,\n}\n\nexport default Location;","import React from 'react';\nimport WeatherIcons from 'react-weathericons';\nimport PropTypes from 'prop-types';\nimport './styles.css'\nimport {\n    CLOUD,\n    SUN,\n    RAIN,\n    SNOW,\n    THUNDER,\n    DIZZLE,\n} from './../../../contants/weathers'\n\nconst icons = {\n    [CLOUD]: 'cloud',\n    [SUN]: 'day-sunny',\n    [RAIN]: 'rain',\n    [SNOW]: 'snow',\n    [THUNDER]: 'day-thunderstorm',\n    [DIZZLE]: 'day-showers',\n\n};\n\nconst getWeatherIcon = weatherState => {\n    const icon = icons[weatherState];\n\n    const sizeIcon = '4x';\n\n    if (icon) {\n        return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon}/>\n    }\n    else {\n        return <WeatherIcons className=\"wicon\" name={'day-sunny'} size={sizeIcon} />\n    }\n}\n\nconst WeatherTemperature = ({ temperature, weatherState }) => (\n    <div className=\"weatherTemperatureCont\">\n        {\n            getWeatherIcon(weatherState)\n        }\n        <span className=\"temperature\">\n            {`${temperature}`}        \n        </span> \n        <span className=\"temperatureType\"> {`CÂº`} \n        </span>\n    </div> \n);\n\nWeatherTemperature.propTypes = {\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.string.isRequired,\n};\n\nexport default WeatherTemperature "," export const CLOUD = 'cloud';\n\n export const SUN = 'day-sunny';\n\n export const RAIN = 'rain';\n\n export const SNOW = 'snow';\n\n export const THUNDER = \"thunder\";\n\n export const DIZZLE = \"drizzle\";\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css'\n\n\nconst WeatherExtraInfo = ({ humidity, wind }) => (\n    <div className=\"weatherExtraInfoCont\">\n        <span className=\"extraInfoText\">{`HÃºmedad: ${humidity} %`}</span> \n        <span className=\"extraInfoText\">{`Vientos: ${wind}`}</span>\n    </div>\n)\n\nWeatherExtraInfo.protTypes = {\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired,\n}\n\nexport default WeatherExtraInfo; ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherTemperature from './WeatherTemperature';\nimport WeatherExtraInfo from './WeatherExtraInfo'\nimport './styles.css'\n\n\nconst WeatherData = ({ data: { temperature, weatherState, humidity, wind } }) => (\n\n    <div className=\"weatherDataCont\" >\n        <WeatherTemperature \n            temperature={temperature} \n            weatherState={weatherState} />\n        <WeatherExtraInfo \n            humidity={humidity} \n            wind={wind}/>\n    </div>\n\n); \n\nWeatherData.propTypes = {\n    data: PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.string.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.string.isRequired,\n    }),\n}\n\nexport default WeatherData;","\nimport convert from 'convert-units';\nimport {\n    SUN,\n    CLOUD,\n    RAIN,\n    SNOW,\n    THUNDER,\n    DIZZLE,\n} from './../../contants/weathers'\n\nconst getTemp = kelvin => {\n    return Number(convert(kelvin).from('K').to('C').toFixed(0));\n}\n\nconst getWeatherState = weather => {\n    const { id } = weather;\n\n    if(id < 300) {\n        return THUNDER;\n    } else if (id < 400) {\n        return DIZZLE;\n    } else if (id < 500) {\n        return RAIN;\n    } else if (id < 600) {\n        return RAIN;\n    } else if (id < 700) {\n        return SNOW;\n    } else if (id === 800) {\n        return SUN;\n    } else {\n        return CLOUD;\n    }\n} \n\nconst transformWeather = weather_data => {\n    const { humidity, temp } = weather_data.main;\n    const { speed } = weather_data.wind;\n    const weatherState = getWeatherState(weather_data.weather[0]);\n    const temperature = getTemp(temp);\n    \n    const data = {\n        humidity,\n        temperature,\n        weatherState,\n        wind: `${speed} m/s`\n    }\n\n    return data;\n}\n\nexport default transformWeather;","\nimport React, { Component } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { PropTypes } from 'prop-types';\nimport getUrlWeatherByCity from './../services/getUrlWeatherByCity';\nimport Location from './Location';\nimport WeatherData from './WeatherData/index';\nimport transformWeather from '../services/tranformWeather';\nimport './styles.css';\n\n\nclass WeatherLocation extends Component {\n\n    constructor(props) {\n        super(props);\n        const { city } = props;\n        this.state = {\n            city,\n            data: null,\n        }\n    }\n\n    componentDidMount() {\n        this.handleUpdateClick();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n    }\n\n    handleUpdateClick = () => {\n\n        const api_weather = getUrlWeatherByCity(this.state.city);\n\n        fetch(api_weather).then( resolve => {\n            return resolve.json();\n        }).then(data => {\n            const newWeather = transformWeather(data);\n            this.setState({\n                data: newWeather,\n            })\n        });\n\n    };\n\n    render () {\n        const { onWeatherLocationClick } = this.props;\n        const { city, data } = this.state;\n        return(\n            <div className=\"weatherLocationCont\" onClick={onWeatherLocationClick}>\n                <Location city={city}/>\n                { data ? \n                    <WeatherData data={data} /> :\n                    <CircularProgress />\n                }\n            </div>\n        )\n    }\n};\n\nWeatherLocation.proTypes = {\n    city: PropTypes.string.isRequired,\n    onWeatherLocationClick: PropTypes.func,\n}\n\nexport default WeatherLocation;","\nimport React from 'react';\nimport WeatherLocation from './WeatherLocation';\nimport PropTypes from 'prop-types';\nimport './styles.css'\n\nconst LocationList = ({ cities, onSelectedLocation }) => {\n    const handleWeatherLocationClick = city => {\n        onSelectedLocation(city);\n    };\n\n    const strToComponent = cities => (\n        cities.map(city => \n            (\n                <WeatherLocation \n                    key={city} \n                    city={city} \n                    onWeatherLocationClick={() => handleWeatherLocationClick(city)} />))\n    );\n\n    return(\n    <div className=\"locationList\">\n        {strToComponent(cities)}\n    </div>)\n};\n \n\nLocationList.propTypes = {\n    cities: PropTypes.array.isRequired,\n    onSelectedLocation: PropTypes.func,\n}\n\nexport default LocationList;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport WeatherData from './../WeatherLocation/WeatherData/index'\n\nconst ForecastItem = ({ weekDay, hour, data }) => (\n  <div>\n      <h2>{weekDay} - {hour} hs.</h2>\n      <WeatherData data={data}/>\n  </div>  \n);\n\nForecastItem.propTypes = {\n    weekDay: PropTypes.string.isRequired,\n    hour: PropTypes.number.isRequired,\n    data: PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.string.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.string.isRequired,\n    }),\n}\n\nexport default ForecastItem;","import moment from 'moment';\nimport 'moment/locale/es';\nimport transformWeather from './tranformWeather';\n\nconst transformForecast = data => (\n    data.list.filter(item => (\n        moment.unix(item.dt).utc().hour() === 6 ||\n        moment.unix(item.dt).utc().hour() === 12 ||\n        moment.unix(item.dt).utc().hour() === 18\n    )).map(item => (\n        {\n            weekDay: moment.unix(item.dt).format('ddd'),\n            hour: moment.unix(item.dt).hour(),\n            data: transformWeather(item)\n        }\n    ))\n);\n\nexport default transformForecast;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ForecastItem from './ForecastItem/index';\nimport transformForecast from './services/transformForecast';\nimport './styles.css'\n\n\nconst api_key = '25cda12ba99af5f6251afbb7d48528fb';\nconst url_base_weather = 'http://api.openweathermap.org/data/2.5/forecast';\n\nclass ForecastExtended extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            forecastData: null,\n        }\n    }\n\n    componentDidMount() {\n        this.updateCity(this.props.city);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.city !== this.props.city) {\n            this.setState({forecastData: null});\n            this.updateCity(nextProps.city)\n        }\n    }\n    \n    updateCity = city => {\n        // fetch o axios\n        const url_forecast = `${url_base_weather}?q=${city}&appid=${api_key}`;\n\n        fetch(url_forecast)\n            .then(data => (data.json()))\n            .then(weather_data => {\n                const forecastData = transformForecast(weather_data);\n                this.setState({ forecastData });\n            }\n        );\n    }\n\n    renderForecastItemDays(forecastData) {\n        return forecastData.map( forecast => (\n            <ForecastItem \n                key={`${forecast.weekDay}${forecast.hour}`}\n                weekDay={forecast.weekDay} \n                hour={forecast.hour} \n                data={forecast.data} />\n        ));\n    }\n\n    renderProgress = () => {\n        return <h1>'Cargando pronÃ³stico extendido...'</h1>;\n    }\n\n    render() {\n        const { city } = this.props;\n        const { forecastData } = this.state;\n\n        return( \n            <div> \n                <h2 className=\"forecast-title\">PronÃ³stico Extendido para {city}</h2>\n                {forecastData ?\n                    this.renderForecastItemDays(forecastData) :\n                    this.renderProgress()\n                    }\n            </div> \n        )\n    }\n}\n\nForecastExtended.propTypes = {\n    city: PropTypes.string.isRequired,\n}\nexport default ForecastExtended;","\nimport React, {Component} from 'react';\nimport { Grid, Col, Row } from 'react-flexbox-grid';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport LocationList from './components/LocationList';\nimport ForecastExtended from './components/ForecastExtended';\nimport './App.css';\n\nconst cities = [\n  'Buenos Aires,ar',\n  'Washington,us',\n  'Bogota,col',\n  'Ciudad de MÃ©xico,mx',\n  'Madrid,es',\n  'Lima,pe'\n];\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = { city: null };\n  }\n  handleSelectionLocation = city => {\n    this.setState({ city });\n  }\n\n  render() {\n\n    const { city } = this.state;\n    return (\n  \n        <Grid>\n          <Row> \n            <Col xs={12}>\n            <AppBar position=\"sticky\">\n              <Toolbar>\n                <Typography variant=\"h4\" color=\"inherit\">\n                  Weather App\n                </Typography>\n              </Toolbar>\n            </AppBar>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={12} md={6}>\n              <LocationList \n                cities={cities}\n                onSelectedLocation={this.handleSelectionLocation}\n              />\n            </Col>\n            <Col xs={12} md={6}>\n              <Paper> \n                <div className='detail'>\n                  { city ? \n                      <ForecastExtended city={city}/> :\n                      null\n                  }\n                </div>\n              </Paper>\n            </Col>\n          </Row>      \n        </Grid>\n\n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}